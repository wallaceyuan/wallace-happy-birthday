/**
 * @param {HTMLElement} selector
 * @param {Object} params
 * @return {undefined}
 */
var Swiper = function(selector, params) {
  /**
   * @param {?} selector
   * @return {?}
   */
  function $$(selector) {
    return document.querySelectorAll ? document.querySelectorAll(selector) : jQuery(selector);
  }
  /**
   * @return {?}
   */
  function maxWrapperPosition() {
    /** @type {number} */
    var a = wrapperSize - containerSize;
    if (params.freeMode) {
      /** @type {number} */
      a = wrapperSize - containerSize;
    }
    if (params.slidesPerView > _this.slides.length) {
      /** @type {number} */
      a = 0;
    }
    if (0 > a) {
      /** @type {number} */
      a = 0;
    }
    return a;
  }
  /**
   * @return {undefined}
   */
  function initEvents() {
    /**
     * @param {Object} src
     * @return {undefined}
     */
    function _loadImage(src) {
      /** @type {Image} */
      var im = new Image;
      /**
       * @return {undefined}
       */
      im.onload = function() {
        _this.imagesLoaded++;
        if (_this.imagesLoaded == _this.imagesToLoad.length && (_this.reInit(), params.onImagesReady)) {
          params.onImagesReady(_this);
        }
      };
      /** @type {Object} */
      im.src = src;
    }
    if (_this.browser.ie10) {
      _this.h.addEventListener(_this.wrapper, _this.touchEvents.touchStart, onTouchStart, false);
      _this.h.addEventListener(document, _this.touchEvents.touchMove, onTouchMove, false);
      _this.h.addEventListener(document, _this.touchEvents.touchEnd, onTouchEnd, false);
    } else {
      if (_this.support.touch) {
        _this.h.addEventListener(_this.wrapper, "touchstart", onTouchStart, false);
        _this.h.addEventListener(_this.wrapper, "touchmove", onTouchMove, false);
        _this.h.addEventListener(_this.wrapper, "touchend", onTouchEnd, false);
      }
      if (params.simulateTouch) {
        _this.h.addEventListener(_this.wrapper, "mousedown", onTouchStart, false);
        _this.h.addEventListener(document, "mousemove", onTouchMove, false);
        _this.h.addEventListener(document, "mouseup", onTouchEnd, false);
      }
    }
    if (params.autoResize) {
      _this.h.addEventListener(window, "resize", _this.resizeFix, false);
    }
    addSlideEvents();
    /** @type {boolean} */
    _this._wheelEvent = false;
    if (params.mousewheelControl) {
      if (void 0 !== document.onmousewheel) {
        /** @type {string} */
        _this._wheelEvent = "mousewheel";
      }
      try {
        WheelEvent("wheel");
        /** @type {string} */
        _this._wheelEvent = "wheel";
      } catch (d) {
      }
      if (!_this._wheelEvent) {
        /** @type {string} */
        _this._wheelEvent = "DOMMouseScroll";
      }
      if (_this._wheelEvent) {
        _this.h.addEventListener(_this.container, _this._wheelEvent, handleMousewheel, false);
      }
    }
    if (params.keyboardControl) {
      _this.h.addEventListener(document, "keydown", handleKeyboardKeys, false);
    }
    if (params.updateOnImagesReady) {
      if (document.querySelectorAll) {
        _this.imagesToLoad = _this.container.querySelectorAll("img");
      } else {
        if (window.jQuery) {
          _this.imagesToLoad = $$(_this.container).find("img");
        }
      }
      /** @type {number} */
      var i = 0;
      for (;i < _this.imagesToLoad.length;i++) {
        _loadImage(_this.imagesToLoad[i].getAttribute("src"));
      }
    }
  }
  /**
   * @return {undefined}
   */
  function addSlideEvents() {
    if (params.preventLinks) {
      /** @type {Array} */
      var codeSegments = [];
      if (document.querySelectorAll) {
        codeSegments = _this.container.querySelectorAll("a");
      } else {
        if (window.jQuery) {
          codeSegments = $$(_this.container).find("a");
        }
      }
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        _this.h.addEventListener(codeSegments[i], "click", preventClick, false);
      }
    }
    if (params.releaseFormElements) {
      codeSegments = document.querySelectorAll ? _this.container.querySelectorAll("input, textarea, select") : $$(_this.container).find("input, textarea, select");
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        _this.h.addEventListener(codeSegments[i], _this.touchEvents.touchStart, releaseForms, true);
      }
    }
    if (params.onSlideClick) {
      /** @type {number} */
      i = 0;
      for (;i < _this.slides.length;i++) {
        _this.h.addEventListener(_this.slides[i], "click", slideClick, false);
      }
    }
    if (params.onSlideTouch) {
      /** @type {number} */
      i = 0;
      for (;i < _this.slides.length;i++) {
        _this.h.addEventListener(_this.slides[i], _this.touchEvents.touchStart, slideTouch, false);
      }
    }
  }
  /**
   * @return {undefined}
   */
  function removeSlideEvents() {
    if (params.onSlideClick) {
      /** @type {number} */
      var i = 0;
      for (;i < _this.slides.length;i++) {
        _this.h.removeEventListener(_this.slides[i], "click", slideClick, false);
      }
    }
    if (params.onSlideTouch) {
      /** @type {number} */
      i = 0;
      for (;i < _this.slides.length;i++) {
        _this.h.removeEventListener(_this.slides[i], _this.touchEvents.touchStart, slideTouch, false);
      }
    }
    if (params.releaseFormElements) {
      var codeSegments = document.querySelectorAll ? _this.container.querySelectorAll("input, textarea, select") : $$(_this.container).find("input, textarea, select");
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        _this.h.removeEventListener(codeSegments[i], _this.touchEvents.touchStart, releaseForms, true);
      }
    }
    if (params.preventLinks) {
      /** @type {Array} */
      codeSegments = [];
      if (document.querySelectorAll) {
        codeSegments = _this.container.querySelectorAll("a");
      } else {
        if (window.jQuery) {
          codeSegments = $$(_this.container).find("a");
        }
      }
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        _this.h.removeEventListener(codeSegments[i], "click", preventClick, false);
      }
    }
  }
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  function handleKeyboardKeys(ev) {
    var zeroQuoted = ev.keyCode || ev.charCode;
    if (37 == zeroQuoted || (39 == zeroQuoted || (38 == zeroQuoted || 40 == zeroQuoted))) {
      /** @type {boolean} */
      var e = false;
      var d = _this.h.getOffset(_this.container);
      var scrollLeft = _this.h.windowScroll().left;
      var scrollTop = _this.h.windowScroll().top;
      var windowWidth = _this.h.windowWidth();
      var windowHeight = _this.h.windowHeight();
      /** @type {Array} */
      d = [[d.left, d.top], [d.left + _this.width, d.top], [d.left, d.top + _this.height], [d.left + _this.width, d.top + _this.height]];
      /** @type {number} */
      var j = 0;
      for (;j < d.length;j++) {
        var point = d[j];
        if (point[0] >= scrollLeft) {
          if (point[0] <= scrollLeft + windowWidth && (point[1] >= scrollTop && point[1] <= scrollTop + windowHeight)) {
            /** @type {boolean} */
            e = true;
          }
        }
      }
      if (!e) {
        return;
      }
    }
    if (isH) {
      if (37 == zeroQuoted || 39 == zeroQuoted) {
        if (ev.preventDefault) {
          ev.preventDefault();
        } else {
          /** @type {boolean} */
          ev.returnValue = false;
        }
      }
      if (39 == zeroQuoted) {
        _this.swipeNext();
      }
      if (37 == zeroQuoted) {
        _this.swipePrev();
      }
    } else {
      if (38 == zeroQuoted || 40 == zeroQuoted) {
        if (ev.preventDefault) {
          ev.preventDefault();
        } else {
          /** @type {boolean} */
          ev.returnValue = false;
        }
      }
      if (40 == zeroQuoted) {
        _this.swipeNext();
      }
      if (38 == zeroQuoted) {
        _this.swipePrev();
      }
    }
  }
  /**
   * @param {Function} e
   * @return {?}
   */
  function handleMousewheel(e) {
    var x = _this._wheelEvent;
    var y;
    if (e.detail) {
      /** @type {number} */
      y = -e.detail;
    } else {
      if ("mousewheel" == x) {
        y = e.wheelDelta;
      } else {
        if ("DOMMouseScroll" == x) {
          /** @type {number} */
          y = -e.detail;
        } else {
          if ("wheel" == x) {
            /** @type {number} */
            y = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? -e.deltaX : -e.deltaY;
          }
        }
      }
    }
    if (params.freeMode) {
      if (isH) {
        _this.getWrapperTranslate("x");
      } else {
        _this.getWrapperTranslate("y");
      }
      if (isH) {
        x = _this.getWrapperTranslate("x") + y;
        y = _this.getWrapperTranslate("y");
        if (0 < x) {
          /** @type {number} */
          x = 0;
        }
        if (x < -maxWrapperPosition()) {
          /** @type {number} */
          x = -maxWrapperPosition();
        }
      } else {
        x = _this.getWrapperTranslate("x");
        y = _this.getWrapperTranslate("y") + y;
        if (0 < y) {
          /** @type {number} */
          y = 0;
        }
        if (y < -maxWrapperPosition()) {
          /** @type {number} */
          y = -maxWrapperPosition();
        }
      }
      _this.setWrapperTransition(0);
      _this.setWrapperTranslate(x, y, 0);
      if (isH) {
        _this.updateActiveSlide(x);
      } else {
        _this.updateActiveSlide(y);
        alert(1);

      }
    } else {
      if (0 > y) {
        _this.swipeNext();
      } else {
        _this.swipePrev();
      }
    }
    if (params.autoplay) {
      _this.stopAutoplay();
    }
    if (e.preventDefault) {
      e.preventDefault();
    } else {
      /** @type {boolean} */
      e.returnValue = false;
    }
    return false;
  }
  /**
   * @param {number} el
   * @return {?}
   */
  function findSlide(el) {
    /** @type {boolean} */
    var found = false;
    for (;!found;) {
      if (-1 < el.className.indexOf(params.slideClass)) {
        /** @type {number} */
        found = el;
      }
      el = el.parentElement;
    }
    return found;
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function slideClick(e) {
    if (_this.allowSlideClick) {
      if (e.target) {
        _this.clickedSlide = this;
        _this.clickedSlideIndex = _this.slides.indexOf(this);
      } else {
        _this.clickedSlide = findSlide(e.srcElement);
        _this.clickedSlideIndex = _this.slides.indexOf(_this.clickedSlide);
      }
      params.onSlideClick(_this);
    }
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function slideTouch(e) {
    _this.clickedSlide = e.target ? this : findSlide(e.srcElement);
    _this.clickedSlideIndex = _this.slides.indexOf(_this.clickedSlide);
    params.onSlideTouch(_this);
  }
  /**
   * @param {Event} e
   * @return {?}
   */
  function preventClick(e) {
    if (!_this.allowLinks) {
      return e.preventDefault ? e.preventDefault() : e.returnValue = false, false;
    }
  }
  /**
   * @param {Event} e
   * @return {?}
   */
  function releaseForms(e) {
    if (e.stopPropagation) {
      e.stopPropagation();
    } else {
      /** @type {boolean} */
      e.returnValue = false;
    }
    return false;
  }
  /**
   * @param {number} event
   * @return {?}
   */
  function onTouchStart(event) {
    if (params.preventLinks) {
      /** @type {boolean} */
      _this.allowLinks = true;
    }
    if (_this.isTouched || params.onlyExternal) {
      return false;
    }
    var n;
    if (n = params.noSwiping) {
      if (n = event.target || event.srcElement) {
        n = event.target || event.srcElement;
        /** @type {boolean} */
        var step = false;
        do {
          if (-1 < n.className.indexOf(params.noSwipingClass)) {
            /** @type {boolean} */
            step = true;
          }
          n = n.parentElement;
        } while (!step && (n.parentElement && -1 == n.className.indexOf(params.wrapperClass)));
        if (!step) {
          if (-1 < n.className.indexOf(params.wrapperClass) && -1 < n.className.indexOf(params.noSwipingClass)) {
            /** @type {boolean} */
            step = true;
          }
        }
        /** @type {boolean} */
        n = step;
      }
    }
    if (n) {
      return false;
    }
    /** @type {boolean} */
    origCount = false;
    /** @type {boolean} */
    _this.isTouched = true;
    /** @type {boolean} */
    last = "touchstart" == event.type;
    if (!last || 1 == event.targetTouches.length) {
      if (params.loop) {
        _this.fixLoop();
      }
      _this.callPlugins("onTouchStartBegin");
      if (!last) {
        if (event.preventDefault) {
          event.preventDefault();
        } else {
          /** @type {boolean} */
          event.returnValue = false;
        }
      }
      n = last ? event.targetTouches[0].pageX : event.pageX || event.clientX;
      event = last ? event.targetTouches[0].pageY : event.pageY || event.clientY;
      _this.touches.startX = _this.touches.currentX = n;
      _this.touches.startY = _this.touches.currentY = event;
      _this.touches.start = _this.touches.current = isH ? n : event;
      _this.setWrapperTransition(0);
      _this.positions.start = _this.positions.current = isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y");
      if (isH) {
        _this.setWrapperTranslate(_this.positions.start, 0, 0);
      } else {
        _this.setWrapperTranslate(0, _this.positions.start, 0);
      }
      /** @type {number} */
      _this.times.start = (new Date).getTime();
      o = void 0;
      if (0 < params.moveStartThreshold) {
        /** @type {boolean} */
        M = false;
      }
      if (params.onTouchStart) {
        params.onTouchStart(_this);
      }
      _this.callPlugins("onTouchStartEnd");
    }
  }
  /**
   * @param {Object} event
   * @return {?}
   */
  function onTouchMove(event) {
    if (_this.isTouched && (!params.onlyExternal && (!last || "mousemove" != event.type))) {
      var pageX = last ? event.targetTouches[0].pageX : event.pageX || event.clientX;
      var pageY = last ? event.targetTouches[0].pageY : event.pageY || event.clientY;
      if ("undefined" === typeof o) {
        if (isH) {
          /** @type {boolean} */
          o = !!(o || Math.abs(pageY - _this.touches.startY) > Math.abs(pageX - _this.touches.startX));
        }
      }
      if (!("undefined" !== typeof o)) {
        if (!isH) {
          /** @type {boolean} */
          o = !!(o || Math.abs(pageY - _this.touches.startY) < Math.abs(pageX - _this.touches.startX));
        }
      }
      if (o) {
        /** @type {boolean} */
        _this.isTouched = false;
      } else {
        if (event.assignedToSwiper) {
          /** @type {boolean} */
          _this.isTouched = false;
        } else {
          if (event.assignedToSwiper = true, _this.isMoved = true, params.preventLinks && (_this.allowLinks = false), params.onSlideClick && (_this.allowSlideClick = false), params.autoplay && _this.stopAutoplay(), !last || 1 == event.touches.length) {
            _this.callPlugins("onTouchMoveStart");
            if (event.preventDefault) {
              event.preventDefault();
            } else {
              /** @type {boolean} */
              event.returnValue = false;
            }
            _this.touches.current = isH ? pageX : pageY;
            _this.positions.current = (_this.touches.current - _this.touches.start) * params.touchRatio + _this.positions.start;
            if (0 < _this.positions.current && params.onResistanceBefore) {
              params.onResistanceBefore(_this, _this.positions.current);
            }
            if (_this.positions.current < -maxWrapperPosition() && params.onResistanceAfter) {
              params.onResistanceAfter(_this, Math.abs(_this.positions.current + maxWrapperPosition()));
            }
            if (params.resistance) {
              if ("100%" != params.resistance) {
                if (0 < _this.positions.current) {
                  /** @type {number} */
                  event = 1 - _this.positions.current / containerSize / 2;
                  /** @type {number} */
                  _this.positions.current = 0.5 > event ? containerSize / 2 : _this.positions.current * event;
                }
                if (_this.positions.current < -maxWrapperPosition()) {
                  pageX = (_this.touches.current - _this.touches.start) * params.touchRatio + (maxWrapperPosition() + _this.positions.start);
                  /** @type {number} */
                  event = (containerSize + pageX) / containerSize;
                  /** @type {number} */
                  pageX = _this.positions.current - pageX * (1 - event) / 2;
                  /** @type {number} */
                  pageY = -maxWrapperPosition() - containerSize / 2;
                  /** @type {number} */
                  _this.positions.current = pageX < pageY || 0 >= event ? pageY : pageX;
                }
              }
            }
            if (params.resistance) {
              if ("100%" == params.resistance) {
                if (0 < _this.positions.current) {
                  if (!params.freeMode || params.freeModeFluid) {
                    /** @type {number} */
                    _this.positions.current = 0;
                  }
                }
                if (_this.positions.current < -maxWrapperPosition()) {
                  if (!params.freeMode || params.freeModeFluid) {
                    /** @type {number} */
                    _this.positions.current = -maxWrapperPosition();
                  }
                }
              }
            }
            if (params.followFinger) {
              if (params.moveStartThreshold) {
                if (Math.abs(_this.touches.current - _this.touches.start) > params.moveStartThreshold || M) {
                  /** @type {boolean} */
                  M = true;
                  if (isH) {
                    _this.setWrapperTranslate(_this.positions.current, 0, 0);
                  } else {
                    _this.setWrapperTranslate(0, _this.positions.current, 0);
                  }
                } else {
                  _this.positions.current = _this.positions.start;
                }
              } else {
                if (isH) {
                  _this.setWrapperTranslate(_this.positions.current, 0, 0);
                } else {
                  _this.setWrapperTranslate(0, _this.positions.current, 0);
                }
              }
              if (params.freeMode || params.watchActiveIndex) {
                _this.updateActiveSlide(_this.positions.current);
              }
              if (params.grabCursor) {
                /** @type {string} */
                _this.container.style.cursor = "move";
                /** @type {string} */
                _this.container.style.cursor = "grabbing";
                /** @type {string} */
                _this.container.style.cursor = "-moz-grabbin";
                /** @type {string} */
                _this.container.style.cursor = "-webkit-grabbing";
              }
              if (!velocityPrevPosition) {
                velocityPrevPosition = _this.touches.current;
              }
              if (!velocityPrevTime) {
                /** @type {number} */
                velocityPrevTime = (new Date).getTime();
              }
              /** @type {number} */
              _this.velocity = (_this.touches.current - velocityPrevPosition) / ((new Date).getTime() - velocityPrevTime) / 2;
              if (2 > Math.abs(_this.touches.current - velocityPrevPosition)) {
                /** @type {number} */
                _this.velocity = 0;
              }
              velocityPrevPosition = _this.touches.current;
              /** @type {number} */
              velocityPrevTime = (new Date).getTime();
              _this.callPlugins("onTouchMoveEnd");
              if (params.onTouchMove) {
                params.onTouchMove(_this);
              }
              return false;
            }
          }
        }
      }
    }
  }
  /**
   * @param {number} event
   * @return {undefined}
   */
  function onTouchEnd(event) {
    if (o) {
      _this.swipeReset();
    }
    if (!params.onlyExternal && _this.isTouched) {
      /** @type {boolean} */
      _this.isTouched = false;
      if (params.grabCursor) {
        /** @type {string} */
        _this.container.style.cursor = "move";
        /** @type {string} */
        _this.container.style.cursor = "grab";
        /** @type {string} */
        _this.container.style.cursor = "-moz-grab";
        /** @type {string} */
        _this.container.style.cursor = "-webkit-grab";
      }
      if (!_this.positions.current) {
        if (!(0 === _this.positions.current)) {
          _this.positions.current = _this.positions.start;
        }
      }
      if (params.followFinger) {
        if (isH) {
          _this.setWrapperTranslate(_this.positions.current, 0, 0);
        } else {
          _this.setWrapperTranslate(0, _this.positions.current, 0);
        }
      }
      /** @type {number} */
      _this.times.end = (new Date).getTime();
      /** @type {number} */
      _this.touches.diff = _this.touches.current - _this.touches.start;
      /** @type {number} */
      _this.touches.abs = Math.abs(_this.touches.diff);
      /** @type {number} */
      _this.positions.diff = _this.positions.current - _this.positions.start;
      /** @type {number} */
      _this.positions.abs = Math.abs(_this.positions.diff);
      /** @type {number} */
      var newPosition = _this.positions.diff;
      /** @type {number} */
      var momentumDuration = _this.positions.abs;
      /** @type {number} */
      event = _this.times.end - _this.times.start;
      if (5 > momentumDuration) {
        if (300 > event && false == _this.allowLinks) {
          if (!params.freeMode) {
            if (!(0 == momentumDuration)) {
              _this.swipeReset();
            }
          }
          if (params.preventLinks) {
            /** @type {boolean} */
            _this.allowLinks = true;
          }
          if (params.onSlideClick) {
            /** @type {boolean} */
            _this.allowSlideClick = true;
          }
        }
      }
      setTimeout(function() {
        if (params.preventLinks) {
          /** @type {boolean} */
          _this.allowLinks = true;
        }
        if (params.onSlideClick) {
          /** @type {boolean} */
          _this.allowSlideClick = true;
        }
      }, 100);
      if (_this.isMoved) {
        /** @type {boolean} */
        _this.isMoved = false;
        var maxPosition = maxWrapperPosition();
        if (0 < _this.positions.current) {
          _this.swipeReset();
        } else {
          if (_this.positions.current < -maxPosition) {
            _this.swipeReset();
          } else {
            if (params.freeMode) {
              if (params.freeModeFluid) {
                /** @type {number} */
                momentumDuration = 1E3 * params.momentumRatio;
                newPosition = _this.positions.current + _this.velocity * momentumDuration;
                /** @type {boolean} */
                var j = false;
                var afterBouncePosition;
                /** @type {number} */
                var bounceAmount = 20 * Math.abs(_this.velocity) * params.momentumBounceRatio;
                if (newPosition < -maxPosition) {
                  if (params.momentumBounce && _this.support.transitions) {
                    if (newPosition + maxPosition < -bounceAmount) {
                      /** @type {number} */
                      newPosition = -maxPosition - bounceAmount;
                    }
                    /** @type {number} */
                    afterBouncePosition = -maxPosition;
                    /** @type {boolean} */
                    origCount = j = true;
                  } else {
                    /** @type {number} */
                    newPosition = -maxPosition;
                  }
                }
                if (0 < newPosition) {
                  if (params.momentumBounce && _this.support.transitions) {
                    if (newPosition > bounceAmount) {
                      /** @type {number} */
                      newPosition = bounceAmount;
                    }
                    /** @type {number} */
                    afterBouncePosition = 0;
                    /** @type {boolean} */
                    origCount = j = true;
                  } else {
                    /** @type {number} */
                    newPosition = 0;
                  }
                }
                if (0 != _this.velocity) {
                  /** @type {number} */
                  momentumDuration = Math.abs((newPosition - _this.positions.current) / _this.velocity);
                }
                if (isH) {
                  _this.setWrapperTranslate(newPosition, 0, 0);
                } else {
                  _this.setWrapperTranslate(0, newPosition, 0);
                }
                _this.setWrapperTransition(momentumDuration);
                if (params.momentumBounce) {
                  if (j) {
                    _this.wrapperTransitionEnd(function() {
                      if (origCount) {
                        if (params.onMomentumBounce) {
                          params.onMomentumBounce(_this);
                        }
                        if (isH) {
                          _this.setWrapperTranslate(afterBouncePosition, 0, 0);
                        } else {
                          _this.setWrapperTranslate(0, afterBouncePosition, 0);
                        }
                        _this.setWrapperTransition(300);
                      }
                    });
                  }
                }
                _this.updateActiveSlide(newPosition);
              }
              if (!params.freeModeFluid || 300 <= event) {
                _this.updateActiveSlide(_this.positions.current);
              }
            } else {
              /** @type {string} */
              direction = 0 > newPosition ? "toNext" : "toPrev";
              if ("toNext" == direction) {
                if (300 >= event) {
                  if (30 > momentumDuration || !params.shortSwipes) {
                    _this.swipeReset();
                  } else {
                    _this.swipeNext(true);
                  }
                }
              }
              if ("toPrev" == direction) {
                if (300 >= event) {
                  if (30 > momentumDuration || !params.shortSwipes) {
                    _this.swipeReset();
                  } else {
                    _this.swipePrev(true);
                  }
                }
              }
              /** @type {number} */
              maxPosition = 0;
              if ("auto" == params.slidesPerView) {
                /** @type {number} */
                newPosition = Math.abs(isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y"));
                /** @type {number} */
                var i = j = 0;
                for (;i < _this.slides.length;i++) {
                  if (bounceAmount = isH ? _this.slides[i].getWidth(true) : _this.slides[i].getHeight(true), j += bounceAmount, j > newPosition) {
                    maxPosition = bounceAmount;
                    break;
                  }
                }
                if (maxPosition > containerSize) {
                  maxPosition = containerSize;
                }
              } else {
                /** @type {number} */
                maxPosition = slideSize * params.slidesPerView;
              }
              if ("toNext" == direction) {
                if (300 < event) {
                  if (momentumDuration >= 0.5 * maxPosition) {
                    _this.swipeNext(true);
                  } else {
                    _this.swipeReset();
                  }
                }
              }
              if ("toPrev" == direction) {
                if (300 < event) {
                  if (momentumDuration >= 0.5 * maxPosition) {
                    _this.swipePrev(true);
                  } else {
                    _this.swipeReset();
                  }
                }
              }
            }
          }
        }
        if (params.onTouchEnd) {
          params.onTouchEnd(_this);
        }
        _this.callPlugins("onTouchEnd");
      } else {
        /** @type {boolean} */
        _this.isMoved = false;
        if (params.onTouchEnd) {
          params.onTouchEnd(_this);
        }
        _this.callPlugins("onTouchEnd");
        _this.swipeReset();
      }
    }
  }
  /**
   * @param {number} newPosition
   * @param {string} b
   * @param {Object} toOptions
   * @return {undefined}
   */
  function swipeToPosition(newPosition, b, toOptions) {
    /**
     * @return {undefined}
     */
    function anim() {
      currentPosition += animationStep;
      if (p = "toNext" == toNext ? currentPosition > newPosition : currentPosition < newPosition) {
        if (isH) {
          _this.setWrapperTranslate(Math.round(currentPosition), 0);
        } else {
          _this.setWrapperTranslate(0, Math.round(currentPosition));
        }
        /** @type {boolean} */
        _this._DOMAnimating = true;
        window.setTimeout(function() {
          anim();
        }, 1E3 / 60);
      } else {
        if (params.onSlideChangeEnd) {
          params.onSlideChangeEnd(_this);
        }
        if (isH) {
          _this.setWrapperTranslate(newPosition, 0);
        } else {
          _this.setWrapperTranslate(0, newPosition);
        }
        /** @type {boolean} */
        _this._DOMAnimating = false;
      }
    }
    if (_this.support.transitions || !params.DOMAnimation) {
      if (isH) {
        _this.setWrapperTranslate(newPosition, 0, 0);
      } else {
        _this.setWrapperTranslate(0, newPosition, 0);
      }
      var speed = "to" == b && 0 <= toOptions.speed ? toOptions.speed : params.speed;
      _this.setWrapperTransition(speed);
    } else {
      var currentPosition = isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y");
      speed = "to" == b && 0 <= toOptions.speed ? toOptions.speed : params.speed;
      /** @type {number} */
      var animationStep = Math.ceil((newPosition - currentPosition) / speed * (1E3 / 60));
      /** @type {string} */
      var toNext = currentPosition > newPosition ? "toNext" : "toPrev";
      /** @type {boolean} */
      var p = "toNext" == toNext ? currentPosition > newPosition : currentPosition < newPosition;
      if (_this._DOMAnimating) {
        return;
      }
      anim();
    }
    _this.updateActiveSlide(newPosition);
    var container = _this.container;

	var img = container.getElementsByTagName('img');


      var className = container.className;
      if(className =='swiper-container'){

        return;

      }else{

        for(var i = 0; i <img.length; i++ ){

            var lazySrc = img[i].getAttribute('lazy-src');

            if( !lazySrc || img[i].getAttribute('src') === lazySrc ){
                continue;
            }
/*            console.log(lazySrc);
*/            img[i].setAttribute('src',lazySrc);

        }

      }

    if (params.onSlideNext && "next" == b) {
      params.onSlideNext(_this, newPosition);
    }
    if (params.onSlidePrev && "prev" == b) {
      params.onSlidePrev(_this, newPosition);
    }
    if (params.onSlideReset && "reset" == b) {
      params.onSlideReset(_this, newPosition);
    }
    if ("next" == b || ("prev" == b || "to" == b && true == toOptions.runCallbacks)) {
      slideChangeCallbacks();
    }
  }
  /**
   * @return {undefined}
   */
  function slideChangeCallbacks() {
    _this.callPlugins("onSlideChangeStart");
    if (params.onSlideChangeStart) {
      if (params.queueStartCallbacks && _this.support.transitions) {
        if (_this._queueStartCallbacks) {
          return;
        }
        /** @type {boolean} */
        _this._queueStartCallbacks = true;
        params.onSlideChangeStart(_this);
        _this.wrapperTransitionEnd(function() {
          /** @type {boolean} */
          _this._queueStartCallbacks = false;
        });
      } else {
        params.onSlideChangeStart(_this);
      }
    }
    if (params.onSlideChangeEnd) {
      if (_this.support.transitions) {
        if (params.queueEndCallbacks) {
          if (!_this._queueEndCallbacks) {
            /** @type {boolean} */
            _this._queueEndCallbacks = true;
            _this.wrapperTransitionEnd(params.onSlideChangeEnd);
          }
        } else {
          _this.wrapperTransitionEnd(params.onSlideChangeEnd);
        }
      } else {
        if (!params.DOMAnimation) {
          setTimeout(function() {
            params.onSlideChangeEnd(_this);
          }, 10);
        }
      }
    }
  }
  /**
   * @return {undefined}
   */
  function removePaginationEvents() {
    var pagers = _this.paginationButtons;
    /** @type {number} */
    var i = 0;
    for (;i < pagers.length;i++) {
      _this.h.removeEventListener(pagers[i], "click", paginationClick, false);
    }
  }
  /**
   * @param {number} e
   * @return {undefined}
   */
  function paginationClick(e) {
    var newIndex;
    e = e.target || e.srcElement;
    var codeSegments = _this.paginationButtons;
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      if (e === codeSegments[i]) {
        /** @type {number} */
        newIndex = i;
      }
    }
    _this.swipeTo(newIndex);
  }
  if (document.body.__defineGetter__ && HTMLElement) {
    var p = HTMLElement.prototype;
    if (p.__defineGetter__) {
      p.__defineGetter__("outerHTML", function() {
        return(new XMLSerializer).serializeToString(this);
      });
    }
  }
  if (!window.getComputedStyle) {
    /**
     * @param {(Element|null)} deepDataAndEvents
     * @param {(null|string)=} mayParseLabeledStatementInstead
     * @return {(CSSStyleDeclaration|null)}
     */
    window.getComputedStyle = function(deepDataAndEvents, mayParseLabeledStatementInstead) {
      /** @type {(Element|null)} */
      this.el = deepDataAndEvents;
      /**
       * @param {string} prop
       * @return {?}
       */
      this.getPropertyValue = function(prop) {
        /** @type {RegExp} */
        var rclass = /(\-([a-z]){1})/g;
        if ("float" === prop) {
          /** @type {string} */
          prop = "styleFloat";
        }
        if (rclass.test(prop)) {
          prop = prop.replace(rclass, function(dataAndEvents, deepDataAndEvents, letter) {
            return letter.toUpperCase();
          });
        }
        return deepDataAndEvents.currentStyle[prop] ? deepDataAndEvents.currentStyle[prop] : null;
      };
      return this;
    };
  }
  if (!Array.prototype.indexOf) {
    /**
     * @param {T} obj
     * @param {number=} start
     * @return {number}
     * @template T
     */
    Array.prototype.indexOf = function(obj, start) {
      /** @type {number} */
      var i = start || 0;
      /** @type {number} */
      var l = this.length;
      for (;i < l;i++) {
        if (this[i] === obj) {
          return i;
        }
      }
      return-1;
    };
  }
  if ((document.querySelectorAll || window.jQuery) && ("undefined" !== typeof selector && (selector.nodeType || 0 !== $$(selector).length))) {
    var _this = this;
    _this.touches = {
      start : 0,
      startX : 0,
      startY : 0,
      current : 0,
      currentX : 0,
      currentY : 0,
      diff : 0,
      abs : 0
    };
    _this.positions = {
      start : 0,
      abs : 0,
      diff : 0,
      current : 0
    };
    _this.times = {
      start : 0,
      end : 0
    };
    /** @type {number} */
    _this.id = (new Date).getTime();
    _this.container = selector.nodeType ? selector : $$(selector)[0];
    /** @type {boolean} */
    _this.isTouched = false;
    /** @type {boolean} */
    _this.isMoved = false;
    /** @type {number} */
    _this.activeIndex = 0;
    /** @type {number} */
    _this.activeLoaderIndex = 0;
    /** @type {number} */
    _this.activeLoopIndex = 0;
    /** @type {null} */
    _this.previousIndex = null;
    /** @type {number} */
    _this.velocity = 0;
    /** @type {Array} */
    _this.snapGrid = [];
    /** @type {Array} */
    _this.slidesGrid = [];
    /** @type {Array} */
    _this.imagesToLoad = [];
    /** @type {number} */
    _this.imagesLoaded = 0;
    /** @type {number} */
    _this.wrapperLeft = 0;
    /** @type {number} */
    _this.wrapperRight = 0;
    /** @type {number} */
    _this.wrapperTop = 0;
    /** @type {number} */
    _this.wrapperBottom = 0;
    var wrapper;
    var slideSize;
    var wrapperSize;
    var direction;
    var o;
    var containerSize;
    p = {
      mode : "horizontal",
      touchRatio : 1,
      speed : 300,
      freeMode : false,
      freeModeFluid : false,
      momentumRatio : 1,
      momentumBounce : true,
      momentumBounceRatio : 1,
      slidesPerView : 1,
      slidesPerGroup : 1,
      simulateTouch : true,
      followFinger : true,
      shortSwipes : true,
      moveStartThreshold : false,
      autoplay : false,
      onlyExternal : false,
      createPagination : true,
      pagination : false,
      paginationElement : "span",
      paginationClickable : false,
      paginationAsRange : true,
      resistance : true,
      scrollContainer : false,
      preventLinks : true,
      noSwiping : false,
      noSwipingClass : "swiper-no-swiping",
      initialSlide : 0,
      keyboardControl : false,
      mousewheelControl : false,
      mousewheelDebounce : 600,
      useCSS3Transforms : true,
      loop : false,
      loopAdditionalSlides : 0,
      calculateHeight : false,
      updateOnImagesReady : true,
      releaseFormElements : true,
      watchActiveIndex : false,
      visibilityFullFit : false,
      offsetPxBefore : 0,
      offsetPxAfter : 0,
      offsetSlidesBefore : 0,
      offsetSlidesAfter : 0,
      centeredSlides : false,
      queueStartCallbacks : false,
      queueEndCallbacks : false,
      autoResize : true,
      resizeReInit : false,
      DOMAnimation : true,
      loader : {
        slides : [],
        slidesHTMLType : "inner",
        surroundGroups : 1,
        logic : "reload",
        loadAllSlides : false
      },
      slideElement : "div",
      slideClass : "swiper-slide",
      slideActiveClass : "swiper-slide-active",
      slideVisibleClass : "swiper-slide-visible",
      wrapperClass : "swiper-wrapper",
      paginationElementClass : "swiper-pagination-switch",
      paginationActiveClass : "swiper-active-switch",
      paginationVisibleClass : "swiper-visible-switch"
    };
    params = params || {};
    var i;
    for (i in p) {
      if (i in params && "object" === typeof params[i]) {
        var prop;
        for (prop in p[i]) {
          if (!(prop in params[i])) {
            params[i][prop] = p[i][prop];
          }
        }
      } else {
        if (!(i in params)) {
          params[i] = p[i];
        }
      }
    }
    /** @type {Object} */
    _this.params = params;
    if (params.scrollContainer) {
      /** @type {boolean} */
      params.freeMode = true;
      /** @type {boolean} */
      params.freeModeFluid = true;
    }
    if (params.loop) {
      /** @type {string} */
      params.resistance = "100%";
    }
    /** @type {boolean} */
    var isH = "horizontal" === params.mode;
    _this.touchEvents = {
      touchStart : _this.support.touch || !params.simulateTouch ? "touchstart" : _this.browser.ie10 ? "MSPointerDown" : "mousedown",
      touchMove : _this.support.touch || !params.simulateTouch ? "touchmove" : _this.browser.ie10 ? "MSPointerMove" : "mousemove",
      touchEnd : _this.support.touch || !params.simulateTouch ? "touchend" : _this.browser.ie10 ? "MSPointerUp" : "mouseup"
    };
    /** @type {number} */
    i = _this.container.childNodes.length - 1;
    for (;0 <= i;i--) {
      if (_this.container.childNodes[i].className) {
        prop = _this.container.childNodes[i].className.split(" ");
        /** @type {number} */
        p = 0;
        for (;p < prop.length;p++) {
          if (prop[p] === params.wrapperClass) {
            wrapper = _this.container.childNodes[i];
          }
        }
      }
    }
    _this.wrapper = wrapper;
    /**
     * @param {Object} el
     * @return {?}
     */
    _this._extendSwiperSlide = function(el) {
      /**
       * @return {?}
       */
      el.append = function() {
        if (params.loop) {
          el.insertAfter(_this.slides.length - _this.loopedSlides);
          _this.removeLoopedSlides();
          _this.calcSlides();
          _this.createLoop();
        } else {
          _this.wrapper.appendChild(el);
        }
        _this.reInit();
        return el;
      };
      /**
       * @return {?}
       */
      el.prepend = function() {
        if (params.loop) {
          _this.wrapper.insertBefore(el, _this.slides[_this.loopedSlides]);
          _this.removeLoopedSlides();
          _this.calcSlides();
          _this.createLoop();
        } else {
          _this.wrapper.insertBefore(el, _this.wrapper.firstChild);
        }
        _this.reInit();
        return el;
      };
      /**
       * @param {number} index
       * @return {?}
       */
      el.insertAfter = function(index) {
        if ("undefined" === typeof index) {
          return false;
        }
        if (params.loop) {
          index = _this.slides[index + 1 + _this.loopedSlides];
          _this.wrapper.insertBefore(el, index);
          _this.removeLoopedSlides();
          _this.calcSlides();
          _this.createLoop();
        } else {
          index = _this.slides[index + 1];
          _this.wrapper.insertBefore(el, index);
        }
        _this.reInit();
        return el;
      };
      /**
       * @return {?}
       */
      el.clone = function() {
        return _this._extendSwiperSlide(el.cloneNode(true));
      };
      /**
       * @return {undefined}
       */
      el.remove = function() {
        _this.wrapper.removeChild(el);
        _this.reInit();
      };
      /**
       * @param {number} h
       * @return {?}
       */
      el.html = function(h) {
        if ("undefined" === typeof h) {
          return el.innerHTML;
        }
        /** @type {number} */
        el.innerHTML = h;
        return el;
      };
      /**
       * @return {?}
       */
      el.index = function() {
        var ret;
        /** @type {number} */
        var i = _this.slides.length - 1;
        for (;0 <= i;i--) {
          if (el === _this.slides[i]) {
            /** @type {number} */
            ret = i;
          }
        }
        return ret;
      };
      /**
       * @return {?}
       */
      el.isActive = function() {
        return el.index() === _this.activeIndex ? true : false;
      };
      if (!el.swiperSlideDataStorage) {
        el.swiperSlideDataStorage = {};
      }
      /**
       * @param {string} name
       * @return {?}
       */
      el.getData = function(name) {
        return el.swiperSlideDataStorage[name];
      };
      /**
       * @param {string} name
       * @param {boolean} value
       * @return {?}
       */
      el.setData = function(name, value) {
        /** @type {boolean} */
        el.swiperSlideDataStorage[name] = value;
        return el;
      };
      /**
       * @param {string} name
       * @param {Node} k
       * @return {?}
       */
      el.data = function(name, k) {
        return k ? (el.setAttribute("data-" + name, k), el) : el.getAttribute("data-" + name);
      };
      /**
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      el.getWidth = function(dataAndEvents) {
        return _this.h.getWidth(el, dataAndEvents);
      };
      /**
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      el.getHeight = function(dataAndEvents) {
        return _this.h.getHeight(el, dataAndEvents);
      };
      /**
       * @return {?}
       */
      el.getOffset = function() {
        return _this.h.getOffset(el);
      };
      return el;
    };
    /**
     * @param {boolean} forceCalcSlides
     * @return {undefined}
     */
    _this.calcSlides = function(forceCalcSlides) {
      var oldNumber = _this.slides ? _this.slides.length : false;
      /** @type {Array} */
      _this.slides = [];
      /** @type {Array} */
      _this.displaySlides = [];
      /** @type {number} */
      var i = 0;
      for (;i < _this.wrapper.childNodes.length;i++) {
        if (_this.wrapper.childNodes[i].className) {
          var _slideClasses = _this.wrapper.childNodes[i].className.split(" ");
          /** @type {number} */
          var j = 0;
          for (;j < _slideClasses.length;j++) {
            if (_slideClasses[j] === params.slideClass) {
              _this.slides.push(_this.wrapper.childNodes[i]);
            }
          }
        }
      }
      /** @type {number} */
      i = _this.slides.length - 1;
      for (;0 <= i;i--) {
        _this._extendSwiperSlide(_this.slides[i]);
      }
      if (oldNumber) {
        if (oldNumber !== _this.slides.length || forceCalcSlides) {
          removeSlideEvents();
          addSlideEvents();
          _this.updateActiveSlide();
          if (params.createPagination) {
            if (_this.params.pagination) {
              _this.createPagination();
            }
          }
          _this.callPlugins("numberOfSlidesChanged");
        }
      }
    };
    /**
     * @param {number} html
     * @param {string} slideClassList
     * @param {Element} el
     * @return {?}
     */
    _this.createSlide = function(html, slideClassList, el) {
      slideClassList = slideClassList || _this.params.slideClass;
      el = el || params.slideElement;
      /** @type {Element} */
      el = document.createElement(el);
      el.innerHTML = html || "";
      /** @type {string} */
      el.className = slideClassList;
      return _this._extendSwiperSlide(el);
    };
    /**
     * @param {?} html
     * @param {string} slideClassList
     * @param {Element} el
     * @return {?}
     */
    _this.appendSlide = function(html, slideClassList, el) {
      if (html) {
        return html.nodeType ? _this._extendSwiperSlide(html).append() : _this.createSlide(html, slideClassList, el).append();
      }
    };
    /**
     * @param {?} html
     * @param {string} slideClassList
     * @param {Element} el
     * @return {?}
     */
    _this.prependSlide = function(html, slideClassList, el) {
      if (html) {
        return html.nodeType ? _this._extendSwiperSlide(html).prepend() : _this.createSlide(html, slideClassList, el).prepend();
      }
    };
    /**
     * @param {number} elem
     * @param {?} html
     * @param {string} slideClassList
     * @param {Element} el
     * @return {?}
     */
    _this.insertSlideAfter = function(elem, html, slideClassList, el) {
      return "undefined" === typeof elem ? false : html.nodeType ? _this._extendSwiperSlide(html).insertAfter(elem) : _this.createSlide(html, slideClassList, el).insertAfter(elem);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    _this.removeSlide = function(index) {
      if (_this.slides[index]) {
        if (params.loop) {
          if (!_this.slides[index + _this.loopedSlides]) {
            return false;
          }
          _this.slides[index + _this.loopedSlides].remove();
          _this.removeLoopedSlides();
          _this.calcSlides();
          _this.createLoop();
        } else {
          _this.slides[index].remove();
        }
        return true;
      }
      return false;
    };
    /**
     * @return {?}
     */
    _this.removeLastSlide = function() {
      return 0 < _this.slides.length ? (params.loop ? (_this.slides[_this.slides.length - 1 - _this.loopedSlides].remove(), _this.removeLoopedSlides(), _this.calcSlides(), _this.createLoop()) : _this.slides[_this.slides.length - 1].remove(), true) : false;
    };
    /**
     * @return {undefined}
     */
    _this.removeAllSlides = function() {
      /** @type {number} */
      var i = _this.slides.length - 1;
      for (;0 <= i;i--) {
        _this.slides[i].remove();
      }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    _this.getSlide = function(index) {
      return _this.slides[index];
    };
    /**
     * @return {?}
     */
    _this.getLastSlide = function() {
      return _this.slides[_this.slides.length - 1];
    };
    /**
     * @return {?}
     */
    _this.getFirstSlide = function() {
      return _this.slides[0];
    };
    /**
     * @return {?}
     */
    _this.activeSlide = function() {
      return _this.slides[_this.activeIndex];
    };
    /** @type {Array} */
    var _plugins = [];
    var plugin;
    for (plugin in _this.plugins) {
      if (params[plugin]) {
        if (i = _this.plugins[plugin](_this, params[plugin])) {
          _plugins.push(i);
        }
      }
    }
    /**
     * @param {string} method
     * @param {Object} opt_attributes
     * @return {undefined}
     */
    _this.callPlugins = function(method, opt_attributes) {
      if (!opt_attributes) {
        opt_attributes = {};
      }
      /** @type {number} */
      var i = 0;
      for (;i < _plugins.length;i++) {
        if (method in _plugins[i]) {
          _plugins[i][method](opt_attributes);
        }
      }
    };
    if (_this.browser.ie10) {
      if (!params.onlyExternal) {
        if (isH) {
          _this.wrapper.classList.add("swiper-wp8-horizontal");
        } else {
          _this.wrapper.classList.add("swiper-wp8-vertical");
        }
      }
    }
    if (params.freeMode) {
      _this.container.className += " swiper-free-mode";
    }
    /** @type {boolean} */
    _this.initialized = false;
    /**
     * @param {boolean} dataAndEvents
     * @param {boolean} forceCalcSlides
     * @return {undefined}
     */
    _this.init = function(dataAndEvents, forceCalcSlides) {
      var wrapper = _this.h.getWidth(_this.container);
      var slideWidth = _this.h.getHeight(_this.container);
      if (wrapper !== _this.width || (slideWidth !== _this.height || dataAndEvents)) {
        _this.width = wrapper;
        _this.height = slideWidth;
        containerSize = isH ? wrapper : slideWidth;
        wrapper = _this.wrapper;
        if (dataAndEvents) {
          _this.calcSlides(forceCalcSlides);
        }
        if ("auto" === params.slidesPerView) {
          /** @type {number} */
          var wrapperHeight = 0;
          /** @type {number} */
          var slidesHeight = 0;
          if (0 < params.slidesOffset) {
            /** @type {string} */
            wrapper.style.paddingLeft = "";
            /** @type {string} */
            wrapper.style.paddingRight = "";
            /** @type {string} */
            wrapper.style.paddingTop = "";
            /** @type {string} */
            wrapper.style.paddingBottom = "";
          }
          /** @type {string} */
          wrapper.style.width = "";
          /** @type {string} */
          wrapper.style.height = "";
          if (0 < params.offsetPxBefore) {
            if (isH) {
              _this.wrapperLeft = params.offsetPxBefore;
            } else {
              _this.wrapperTop = params.offsetPxBefore;
            }
          }
          if (0 < params.offsetPxAfter) {
            if (isH) {
              _this.wrapperRight = params.offsetPxAfter;
            } else {
              _this.wrapperBottom = params.offsetPxAfter;
            }
          }
          if (params.centeredSlides) {
            if (isH) {
              /** @type {number} */
              _this.wrapperLeft = (containerSize - this.slides[0].getWidth(true)) / 2;
              /** @type {number} */
              _this.wrapperRight = (containerSize - _this.slides[_this.slides.length - 1].getWidth(true)) / 2;
            } else {
              /** @type {number} */
              _this.wrapperTop = (containerSize - _this.slides[0].getHeight(true)) / 2;
              /** @type {number} */
              _this.wrapperBottom = (containerSize - _this.slides[_this.slides.length - 1].getHeight(true)) / 2;
            }
          }
          if (isH) {
            if (0 <= _this.wrapperLeft) {
              /** @type {string} */
              wrapper.style.paddingLeft = _this.wrapperLeft + "px";
            }
            if (0 <= _this.wrapperRight) {
              /** @type {string} */
              wrapper.style.paddingRight = _this.wrapperRight + "px";
            }
          } else {
            if (0 <= _this.wrapperTop) {
              /** @type {string} */
              wrapper.style.paddingTop = _this.wrapperTop + "px";
            }
            if (0 <= _this.wrapperBottom) {
              /** @type {string} */
              wrapper.style.paddingBottom = _this.wrapperBottom + "px";
            }
          }
          /** @type {number} */
          var slideLeft = 0;
          /** @type {number} */
          var copies = 0;
          /** @type {Array} */
          _this.snapGrid = [];
          /** @type {Array} */
          _this.slidesGrid = [];
          /** @type {number} */
          var slideMaxHeight = 0;
          /** @type {number} */
          var i = 0;
          for (;i < _this.slides.length;i++) {
            slideWidth = _this.slides[i].getWidth(true);
            var slideHeight = _this.slides[i].getHeight(true);
            if (params.calculateHeight) {
              /** @type {number} */
              slideMaxHeight = Math.max(slideMaxHeight, slideHeight);
            }
            var _slideSize = isH ? slideWidth : slideHeight;
            if (params.centeredSlides) {
              var wrapperWidth = i === _this.slides.length - 1 ? 0 : _this.slides[i + 1].getWidth(true);
              var j = i === _this.slides.length - 1 ? 0 : _this.slides[i + 1].getHeight(true);
              wrapperWidth = isH ? wrapperWidth : j;
              if (_slideSize > containerSize) {
                /** @type {number} */
                j = 0;
                for (;j <= Math.floor(_slideSize / (containerSize + _this.wrapperLeft));j++) {
                  if (0 === j) {
                    _this.snapGrid.push(slideLeft + _this.wrapperLeft);
                  } else {
                    _this.snapGrid.push(slideLeft + _this.wrapperLeft + containerSize * j);
                  }
                }
                _this.slidesGrid.push(slideLeft + _this.wrapperLeft);
              } else {
                _this.snapGrid.push(copies);
                _this.slidesGrid.push(copies);
              }
              copies += _slideSize / 2 + wrapperWidth / 2;
            } else {
              if (_slideSize > containerSize) {
                /** @type {number} */
                j = 0;
                for (;j <= Math.floor(_slideSize / containerSize);j++) {
                  _this.snapGrid.push(slideLeft + containerSize * j);
                }
              } else {
                _this.snapGrid.push(slideLeft);
              }
              _this.slidesGrid.push(slideLeft);
            }
            slideLeft += _slideSize;
            wrapperHeight += slideWidth;
            slidesHeight += slideHeight;
          }
          if (params.calculateHeight) {
            /** @type {number} */
            _this.height = slideMaxHeight;
          }
          if (isH) {
            wrapperSize = wrapperHeight + _this.wrapperRight + _this.wrapperLeft;
            /** @type {string} */
            wrapper.style.width = wrapperHeight + "px";
            /** @type {string} */
            wrapper.style.height = _this.height + "px";
          } else {
            wrapperSize = slidesHeight + _this.wrapperTop + _this.wrapperBottom;
            /** @type {string} */
            wrapper.style.width = _this.width + "px";
            /** @type {string} */
            wrapper.style.height = slidesHeight + "px";
          }
        } else {
          if (params.scrollContainer) {
            /** @type {string} */
            wrapper.style.width = "";
            /** @type {string} */
            wrapper.style.height = "";
            slideMaxHeight = _this.slides[0].getWidth(true);
            wrapperHeight = _this.slides[0].getHeight(true);
            wrapperSize = isH ? slideMaxHeight : wrapperHeight;
            /** @type {string} */
            wrapper.style.width = slideMaxHeight + "px";
            /** @type {string} */
            wrapper.style.height = wrapperHeight + "px";
            slideSize = isH ? slideMaxHeight : wrapperHeight;
          } else {
            if (params.calculateHeight) {
              /** @type {number} */
              wrapperHeight = slideMaxHeight = 0;
              if (!isH) {
                /** @type {string} */
                _this.container.style.height = "";
              }
              /** @type {string} */
              wrapper.style.height = "";
              /** @type {number} */
              i = 0;
              for (;i < _this.slides.length;i++) {
                /** @type {string} */
                _this.slides[i].style.height = "";
                /** @type {number} */
                slideMaxHeight = Math.max(_this.slides[i].getHeight(true), slideMaxHeight);
                if (!isH) {
                  wrapperHeight += _this.slides[i].getHeight(true);
                }
              }
              /** @type {number} */
              slideHeight = slideMaxHeight;
              /** @type {number} */
              _this.height = slideHeight;
              if (isH) {
                /** @type {number} */
                wrapperHeight = slideHeight;
              } else {
                /** @type {number} */
                containerSize = slideHeight;
                /** @type {string} */
                _this.container.style.height = containerSize + "px";
              }
            } else {
              slideHeight = isH ? _this.height : _this.height / params.slidesPerView;
              wrapperHeight = isH ? _this.height : _this.slides.length * slideHeight;
            }
            slideWidth = isH ? _this.width / params.slidesPerView : _this.width;
            slideMaxHeight = isH ? _this.slides.length * slideWidth : _this.width;
            slideSize = isH ? slideWidth : slideHeight;
            if (0 < params.offsetSlidesBefore) {
              if (isH) {
                /** @type {number} */
                _this.wrapperLeft = slideSize * params.offsetSlidesBefore;
              } else {
                /** @type {number} */
                _this.wrapperTop = slideSize * params.offsetSlidesBefore;
              }
            }
            if (0 < params.offsetSlidesAfter) {
              if (isH) {
                /** @type {number} */
                _this.wrapperRight = slideSize * params.offsetSlidesAfter;
              } else {
                /** @type {number} */
                _this.wrapperBottom = slideSize * params.offsetSlidesAfter;
              }
            }
            if (0 < params.offsetPxBefore) {
              if (isH) {
                _this.wrapperLeft = params.offsetPxBefore;
              } else {
                _this.wrapperTop = params.offsetPxBefore;
              }
            }
            if (0 < params.offsetPxAfter) {
              if (isH) {
                _this.wrapperRight = params.offsetPxAfter;
              } else {
                _this.wrapperBottom = params.offsetPxAfter;
              }
            }
            if (params.centeredSlides) {
              if (isH) {
                /** @type {number} */
                _this.wrapperLeft = (containerSize - slideSize) / 2;
                /** @type {number} */
                _this.wrapperRight = (containerSize - slideSize) / 2;
              } else {
                /** @type {number} */
                _this.wrapperTop = (containerSize - slideSize) / 2;
                /** @type {number} */
                _this.wrapperBottom = (containerSize - slideSize) / 2;
              }
            }
            if (isH) {
              if (0 < _this.wrapperLeft) {
                /** @type {string} */
                wrapper.style.paddingLeft = _this.wrapperLeft + "px";
              }
              if (0 < _this.wrapperRight) {
                /** @type {string} */
                wrapper.style.paddingRight = _this.wrapperRight + "px";
              }
            } else {
              if (0 < _this.wrapperTop) {
                /** @type {string} */
                wrapper.style.paddingTop = _this.wrapperTop + "px";
              }
              if (0 < _this.wrapperBottom) {
                /** @type {string} */
                wrapper.style.paddingBottom = _this.wrapperBottom + "px";
              }
            }
            wrapperSize = isH ? slideMaxHeight + _this.wrapperRight + _this.wrapperLeft : wrapperHeight + _this.wrapperTop + _this.wrapperBottom;
            /** @type {string} */
            wrapper.style.width = slideMaxHeight + "px";
            /** @type {string} */
            wrapper.style.height = wrapperHeight + "px";
            /** @type {number} */
            slideLeft = 0;
            /** @type {Array} */
            _this.snapGrid = [];
            /** @type {Array} */
            _this.slidesGrid = [];
            /** @type {number} */
            i = 0;
            for (;i < _this.slides.length;i++) {
              _this.snapGrid.push(slideLeft);
              _this.slidesGrid.push(slideLeft);
              slideLeft += slideSize;
              /** @type {string} */
              _this.slides[i].style.width = slideWidth + "px";
              /** @type {string} */
              _this.slides[i].style.height = slideHeight + "px";
            }
          }
        }
        if (_this.initialized) {
          if (_this.callPlugins("onInit"), params.onFirstInit) {
            params.onInit(_this);
          }
        } else {
          if (_this.callPlugins("onFirstInit"), params.onFirstInit) {
            params.onFirstInit(_this);
          }
        }
        /** @type {boolean} */
        _this.initialized = true;
      }
    };
    /**
     * @param {boolean} forceCalcSlides
     * @return {undefined}
     */
    _this.reInit = function(forceCalcSlides) {
      _this.init(true, forceCalcSlides);
    };
    /**
     * @param {number} x
     * @return {undefined}
     */
    _this.resizeFix = function(x) {
      _this.callPlugins("beforeResizeFix");
      _this.init(params.resizeReInit || x);
      if (!params.freeMode) {
        if (params.loop) {
          _this.swipeTo(_this.activeLoopIndex, 0, false);
        } else {
          _this.swipeTo(_this.activeIndex, 0, false);
        }
      } else {
        if ((isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y")) < -maxWrapperPosition()) {
          /** @type {number} */
          x = isH ? -maxWrapperPosition() : 0;
          /** @type {number} */
          var y = isH ? 0 : -maxWrapperPosition();
          _this.setWrapperTransition(0);
          _this.setWrapperTranslate(x, y, 0);
        }
      }
      _this.callPlugins("afterResizeFix");
    };
    /**
     * @param {?} removeResizeFix
     * @return {undefined}
     */
    _this.destroy = function(removeResizeFix) {
      if (_this.browser.ie10) {
        _this.h.removeEventListener(_this.wrapper, _this.touchEvents.touchStart, onTouchStart, false);
        _this.h.removeEventListener(document, _this.touchEvents.touchMove, onTouchMove, false);
        _this.h.removeEventListener(document, _this.touchEvents.touchEnd, onTouchEnd, false);
      } else {
        if (_this.support.touch) {
          _this.h.removeEventListener(_this.wrapper, "touchstart", onTouchStart, false);
          _this.h.removeEventListener(_this.wrapper, "touchmove", onTouchMove, false);
          _this.h.removeEventListener(_this.wrapper, "touchend", onTouchEnd, false);
        }
        if (params.simulateTouch) {
          _this.h.removeEventListener(_this.wrapper, "mousedown", onTouchStart, false);
          _this.h.removeEventListener(document, "mousemove", onTouchMove, false);
          _this.h.removeEventListener(document, "mouseup", onTouchEnd, false);
        }
      }
      if (params.autoResize) {
        _this.h.removeEventListener(window, "resize", _this.resizeFix, false);
      }
      removeSlideEvents();
      if (params.paginationClickable) {
        removePaginationEvents();
      }
      if (params.mousewheelControl) {
        if (_this._wheelEvent) {
          _this.h.removeEventListener(_this.container, _this._wheelEvent, handleMousewheel, false);
        }
      }
      if (params.keyboardControl) {
        _this.h.removeEventListener(document, "keydown", handleKeyboardKeys, false);
      }
      if (params.autoplay) {
        _this.stopAutoplay();
      }
      _this.callPlugins("onDestroy");
      /** @type {null} */
      _this = null;
    };
    if (params.grabCursor) {
      /** @type {string} */
      _this.container.style.cursor = "move";
      /** @type {string} */
      _this.container.style.cursor = "grab";
      /** @type {string} */
      _this.container.style.cursor = "-moz-grab";
      /** @type {string} */
      _this.container.style.cursor = "-webkit-grab";
    }
    /** @type {boolean} */
    _this.allowSlideClick = true;
    /** @type {boolean} */
    _this.allowLinks = true;
    /** @type {boolean} */
    var last = false;
    var M;
    /** @type {boolean} */
    var origCount = true;
    var velocityPrevPosition;
    var velocityPrevTime;
    /**
     * @param {boolean} b
     * @return {?}
     */
    _this.swipeNext = function(b) {
      if (!b) {
        if (params.loop) {
          _this.fixLoop();
        }
      }
      _this.callPlugins("onSwipeNext");
      var a = b = isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y");
      if ("auto" == params.slidesPerView) {
        /** @type {number} */
        var i = 0;
        for (;i < _this.snapGrid.length;i++) {
          if (-b >= _this.snapGrid[i] && -b < _this.snapGrid[i + 1]) {
            /** @type {number} */
            a = -_this.snapGrid[i + 1];
            break;
          }
        }
      } else {
        /** @type {number} */
        a = slideSize * params.slidesPerGroup;
        /** @type {number} */
        a = -(Math.floor(Math.abs(b) / Math.floor(a)) * a + a);
      }
      if (a < -maxWrapperPosition()) {
        /** @type {number} */
        a = -maxWrapperPosition();
      }
      if (a == b) {
        return false;
      }
      swipeToPosition(a, "next");
      return true;
    };
    /**
     * @param {Object} dataAndEvents
     * @return {?}
     */
    _this.swipePrev = function(dataAndEvents) {
      if (!dataAndEvents) {
        if (params.loop) {
          _this.fixLoop();
        }
      }
      if (!dataAndEvents) {
        if (params.autoplay) {
          _this.stopAutoplay();
        }
      }
      _this.callPlugins("onSwipePrev");
      /** @type {number} */
      dataAndEvents = Math.ceil(isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y"));
      var order;
      if ("auto" == params.slidesPerView) {
        /** @type {number} */
        order = 0;
        /** @type {number} */
        var i = 1;
        for (;i < _this.snapGrid.length;i++) {
          if (-dataAndEvents == _this.snapGrid[i]) {
            /** @type {number} */
            order = -_this.snapGrid[i - 1];
            break;
          }
          if (-dataAndEvents > _this.snapGrid[i] && -dataAndEvents < _this.snapGrid[i + 1]) {
            /** @type {number} */
            order = -_this.snapGrid[i];
            break;
          }
        }
      } else {
        /** @type {number} */
        order = slideSize * params.slidesPerGroup;
        order *= -(Math.ceil(-dataAndEvents / order) - 1);
      }
      if (0 < order) {
        /** @type {number} */
        order = 0;
      }
      if (order == dataAndEvents) {
        return false;
      }
      swipeToPosition(order, "prev");
      return true;
    };
    /**
     * @return {?}
     */
    _this.swipeReset = function() {
      _this.callPlugins("onSwipeReset");
      var currentPosition = isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y");
      /** @type {number} */
      var groupSize = slideSize * params.slidesPerGroup;
      maxWrapperPosition();
      if ("auto" == params.slidesPerView) {
        /** @type {number} */
        var i = groupSize = 0;
        for (;i < _this.snapGrid.length;i++) {
          if (-currentPosition === _this.snapGrid[i]) {
            return;
          }
          if (-currentPosition >= _this.snapGrid[i] && -currentPosition < _this.snapGrid[i + 1]) {
            /** @type {number} */
            groupSize = 0 < _this.positions.diff ? -_this.snapGrid[i + 1] : -_this.snapGrid[i];
            break;
          }
        }
        if (-currentPosition >= _this.snapGrid[_this.snapGrid.length - 1]) {
          /** @type {number} */
          groupSize = -_this.snapGrid[_this.snapGrid.length - 1];
        }
        if (currentPosition <= -maxWrapperPosition()) {
          /** @type {number} */
          groupSize = -maxWrapperPosition();
        }
      } else {
        /** @type {number} */
        groupSize = 0 > currentPosition ? Math.round(currentPosition / groupSize) * groupSize : 0;
      }
      if (params.scrollContainer) {
        groupSize = 0 > currentPosition ? currentPosition : 0;
      }
      if (groupSize < -maxWrapperPosition()) {
        /** @type {number} */
        groupSize = -maxWrapperPosition();
      }
      if (params.scrollContainer) {
        if (containerSize > slideSize) {
          /** @type {number} */
          groupSize = 0;
        }
      }
      if (groupSize == currentPosition) {
        return false;
      }
      swipeToPosition(groupSize, "reset");
      return true;
    };
    /**
     * @param {number} index
     * @param {number} mayParseLabeledStatementInstead
     * @param {boolean} recurring
     * @return {?}
     */
    _this.swipeTo = function(index, mayParseLabeledStatementInstead, recurring) {
      /** @type {number} */
      index = parseInt(index, 10);
      _this.callPlugins("onSwipeTo", {
        index : index,
        speed : mayParseLabeledStatementInstead
      });
      if (params.loop) {
        index += _this.loopedSlides;
      }
      var currentPosition = isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y");
      if (!(index > _this.slides.length - 1 || 0 > index)) {
        var newPosition;
        /** @type {number} */
        newPosition = "auto" == params.slidesPerView ? -_this.slidesGrid[index] : -index * slideSize;
        if (newPosition < -maxWrapperPosition()) {
          /** @type {number} */
          newPosition = -maxWrapperPosition();
        }
        if (newPosition == currentPosition) {
          return false;
        }
        swipeToPosition(newPosition, "to", {
          index : index,
          speed : mayParseLabeledStatementInstead,
          runCallbacks : false === recurring ? false : true
        });
        return true;
      }
    };
    /** @type {boolean} */
    _this._queueStartCallbacks = false;
    /** @type {boolean} */
    _this._queueEndCallbacks = false;
    /**
     * @param {number} position
     * @return {undefined}
     */
    _this.updateActiveSlide = function(position) {
      if (_this.initialized && 0 != _this.slides.length) {
        _this.previousIndex = _this.activeIndex;
        if (0 < position) {
          /** @type {number} */
          position = 0;
        }
        if ("undefined" == typeof position) {
          position = isH ? _this.getWrapperTranslate("x") : _this.getWrapperTranslate("y");
        }
        if ("auto" == params.slidesPerView) {
          if (_this.activeIndex = _this.slidesGrid.indexOf(-position), 0 > _this.activeIndex) {
            /** @type {number} */
            var i = 0;
            for (;i < _this.slidesGrid.length - 1 && !(-position > _this.slidesGrid[i] && -position < _this.slidesGrid[i + 1]);i++) {
            }
            /** @type {number} */
            var currDirRegExp = Math.abs(_this.slidesGrid[i] + position);
            /** @type {number} */
            var r20 = Math.abs(_this.slidesGrid[i + 1] + position);
            /** @type {number} */
            _this.activeIndex = currDirRegExp <= r20 ? i : i + 1;
          }
        } else {
          /** @type {number} */
          _this.activeIndex = params.visibilityFullFit ? Math.ceil(-position / slideSize) : Math.round(-position / slideSize);
        }
        if (_this.activeIndex == _this.slides.length) {
          /** @type {number} */
          _this.activeIndex = _this.slides.length - 1;
        }
        if (0 > _this.activeIndex) {
          /** @type {number} */
          _this.activeIndex = 0;
        }
        if (_this.slides[_this.activeIndex]) {
          _this.calcVisibleSlides(position);
          /** @type {RegExp} */
          currDirRegExp = RegExp("\\s*" + params.slideActiveClass);
          /** @type {RegExp} */
          r20 = RegExp("\\s*" + params.slideVisibleClass);
          /** @type {number} */
          i = 0;
          for (;i < _this.slides.length;i++) {
            _this.slides[i].className = _this.slides[i].className.replace(currDirRegExp, "").replace(r20, "");
            if (0 <= _this.visibleSlides.indexOf(_this.slides[i])) {
              _this.slides[i].className += " " + params.slideVisibleClass;
            }
          }
          _this.slides[_this.activeIndex].className += " " + params.slideActiveClass;
          if (params.loop) {
            i = _this.loopedSlides;
            /** @type {number} */
            _this.activeLoopIndex = _this.activeIndex - i;
            if (_this.activeLoopIndex >= _this.slides.length - 2 * i) {
              /** @type {number} */
              _this.activeLoopIndex = _this.slides.length - 2 * i - _this.activeLoopIndex;
            }
            if (0 > _this.activeLoopIndex) {
              /** @type {number} */
              _this.activeLoopIndex = _this.slides.length - 2 * i + _this.activeLoopIndex;
            }
          } else {
            _this.activeLoopIndex = _this.activeIndex;
          }
          if (params.pagination) {
            _this.updatePagination(position);
          }
        }
      }
    };
    /**
     * @param {Object} ca
     * @return {undefined}
     */
    _this.createPagination = function(ca) {
      if (params.paginationClickable) {
        if (_this.paginationButtons) {
          removePaginationEvents();
        }
      }
      /** @type {string} */
      var i = "";
      var nTokens = _this.slides.length;
      if (params.loop) {
        nTokens -= 2 * _this.loopedSlides;
      }
      /** @type {number} */
      var ti = 0;
      for (;ti < nTokens;ti++) {
        i += "<" + params.paginationElement + ' class="' + params.paginationElementClass + '"></' + params.paginationElement + ">";
      }
      _this.paginationContainer = params.pagination.nodeType ? params.pagination : $$(params.pagination)[0];
      /** @type {string} */
      _this.paginationContainer.innerHTML = i;
      /** @type {Array} */
      _this.paginationButtons = [];
      if (document.querySelectorAll) {
        _this.paginationButtons = _this.paginationContainer.querySelectorAll("." + params.paginationElementClass);
      } else {
        if (window.jQuery) {
          _this.paginationButtons = $$(_this.paginationContainer).find("." + params.paginationElementClass);
        }
      }
      if (!ca) {
        _this.updatePagination();
      }
      _this.callPlugins("onCreatePagination");
      if (params.paginationClickable) {
        /** @type {Array} */
        ca = _this.paginationButtons;
        /** @type {number} */
        i = 0;
        for (;i < ca.length;i++) {
          _this.h.addEventListener(ca[i], "click", paginationClick, false);
        }
      }
    };
    /**
     * @param {Array} position
     * @return {undefined}
     */
    _this.updatePagination = function(position) {
      if (params.pagination && !(1 > _this.slides.length)) {
        if (document.querySelectorAll) {
          var pagers = _this.paginationContainer.querySelectorAll("." + params.paginationActiveClass)
        } else {
          if (window.jQuery) {
            pagers = $$(_this.paginationContainer).find("." + params.paginationActiveClass);
          }
        }
        if (pagers && (pagers = _this.paginationButtons, 0 != pagers.length)) {
          /** @type {number} */
          var i = 0;
          for (;i < pagers.length;i++) {
            pagers[i].className = params.paginationElementClass;
          }
          var clientTop = params.loop ? _this.loopedSlides : 0;
          if (params.paginationAsRange) {
            if (!_this.visibleSlides) {
              _this.calcVisibleSlides(position);
            }
            /** @type {Array} */
            position = [];
            /** @type {number} */
            i = 0;
            for (;i < _this.visibleSlides.length;i++) {
              /** @type {number} */
              var top = _this.slides.indexOf(_this.visibleSlides[i]) - clientTop;
              if (params.loop) {
                if (0 > top) {
                  /** @type {number} */
                  top = _this.slides.length - 2 * _this.loopedSlides + top;
                }
              }
              if (params.loop) {
                if (top >= _this.slides.length - 2 * _this.loopedSlides) {
                  /** @type {number} */
                  top = _this.slides.length - 2 * _this.loopedSlides - top;
                  /** @type {number} */
                  top = Math.abs(top);
                }
              }
              position.push(top);
            }
            /** @type {number} */
            i = 0;
            for (;i < position.length;i++) {
              if (pagers[position[i]]) {
                pagers[position[i]].className += " " + params.paginationVisibleClass;
              }
            }
            if (params.loop) {
              pagers[_this.activeLoopIndex].className += " " + params.paginationActiveClass;
            } else {
              pagers[_this.activeIndex].className += " " + params.paginationActiveClass;
            }
          } else {
            if (params.loop) {
              pagers[_this.activeLoopIndex].className += " " + params.paginationActiveClass + " " + params.paginationVisibleClass;
            } else {
              pagers[_this.activeIndex].className += " " + params.paginationActiveClass + " " + params.paginationVisibleClass;
            }
          }
        }
      }
    };
    /**
     * @param {?} position
     * @return {undefined}
     */
    _this.calcVisibleSlides = function(position) {
      /** @type {Array} */
      var visibleSlides = [];
      /** @type {number} */
      var _slideLeft = 0;
      /** @type {number} */
      var _slideSize = 0;
      /** @type {number} */
      var _slideRight = 0;
      if (isH) {
        if (0 < _this.wrapperLeft) {
          position += _this.wrapperLeft;
        }
      }
      if (!isH) {
        if (0 < _this.wrapperTop) {
          position += _this.wrapperTop;
        }
      }
      /** @type {number} */
      var i = 0;
      for (;i < _this.slides.length;i++) {
        _slideLeft = _slideLeft + _slideSize;
        _slideSize = "auto" == params.slidesPerView ? isH ? _this.h.getWidth(_this.slides[i], true) : _this.h.getHeight(_this.slides[i], true) : slideSize;
        _slideRight = _slideLeft + _slideSize;
        /** @type {boolean} */
        var m = false;
        if (params.visibilityFullFit) {
          if (_slideLeft >= -position) {
            if (_slideRight <= -position + containerSize) {
              /** @type {boolean} */
              m = true;
            }
          }
          if (_slideLeft <= -position) {
            if (_slideRight >= -position + containerSize) {
              /** @type {boolean} */
              m = true;
            }
          }
        } else {
          if (_slideRight > -position) {
            if (_slideRight <= -position + containerSize) {
              /** @type {boolean} */
              m = true;
            }
          }
          if (_slideLeft >= -position) {
            if (_slideLeft < -position + containerSize) {
              /** @type {boolean} */
              m = true;
            }
          }
          if (_slideLeft < -position) {
            if (_slideRight > -position + containerSize) {
              /** @type {boolean} */
              m = true;
            }
          }
        }
        if (m) {
          visibleSlides.push(_this.slides[i]);
        }
      }
      if (0 == visibleSlides.length) {
        /** @type {Array} */
        visibleSlides = [_this.slides[_this.activeIndex]];
      }
      /** @type {Array} */
      _this.visibleSlides = visibleSlides;
    };
    _this.autoPlayIntervalId = void 0;
    /**
     * @return {?}
     */
    _this.startAutoplay = function() {
      if ("undefined" !== typeof _this.autoPlayIntervalId) {
        return false;
      }
      if (params.autoplay) {
        if (!params.loop) {
          /** @type {number} */
          _this.autoPlayIntervalId = setInterval(function() {
            if (!_this.swipeNext(true)) {
              _this.swipeTo(0);
            }
          }, params.autoplay);
        }
      }
      if (params.autoplay) {
        if (params.loop) {
          /** @type {number} */
          _this.autoPlayIntervalId = setInterval(function() {
            _this.swipeNext();
          }, params.autoplay);
        }
      }
      _this.callPlugins("onAutoplayStart");
    };
    /**
     * @return {undefined}
     */
    _this.stopAutoplay = function() {
      if (_this.autoPlayIntervalId) {
        clearInterval(_this.autoPlayIntervalId);
      }
      _this.autoPlayIntervalId = void 0;
      _this.callPlugins("onAutoplayStop");
    };
    /** @type {boolean} */
    _this.loopCreated = false;
    /**
     * @return {undefined}
     */
    _this.removeLoopedSlides = function() {
      if (_this.loopCreated) {
        /** @type {number} */
        var i = 0;
        for (;i < _this.slides.length;i++) {
          if (true === _this.slides[i].getData("looped")) {
            _this.wrapper.removeChild(_this.slides[i]);
          }
        }
      }
    };
    /**
     * @return {undefined}
     */
    _this.createLoop = function() {
      if (0 != _this.slides.length) {
        _this.loopedSlides = params.slidesPerView + params.loopAdditionalSlides;
        /** @type {string} */
        var slideFirstHTML = "";
        /** @type {string} */
        var slideLastHTML = "";
        /** @type {number} */
        var i = 0;
        for (;i < _this.loopedSlides;i++) {
          slideFirstHTML += _this.slides[i].outerHTML;
        }
        /** @type {number} */
        i = _this.slides.length - _this.loopedSlides;
        for (;i < _this.slides.length;i++) {
          slideLastHTML += _this.slides[i].outerHTML;
        }
        /** @type {string} */
        wrapper.innerHTML = slideLastHTML + wrapper.innerHTML + slideFirstHTML;
        /** @type {boolean} */
        _this.loopCreated = true;
        _this.calcSlides();
        /** @type {number} */
        i = 0;
        for (;i < _this.slides.length;i++) {
          if (i < _this.loopedSlides || i >= _this.slides.length - _this.loopedSlides) {
            _this.slides[i].setData("looped", true);
          }
        }
        _this.callPlugins("onCreateLoop");
      }
    };
    /**
     * @return {undefined}
     */
    _this.fixLoop = function() {
      if (_this.activeIndex < _this.loopedSlides) {
        var newIndex = _this.slides.length - 3 * _this.loopedSlides + _this.activeIndex;
        _this.swipeTo(newIndex, 0, false);
      } else {
        if (_this.activeIndex > _this.slides.length - 2 * params.slidesPerView) {
          newIndex = -_this.slides.length + _this.activeIndex + _this.loopedSlides;
          _this.swipeTo(newIndex, 0, false);
        }
      }
    };
    /**
     * @return {undefined}
     */
    _this.loadSlides = function() {
      /** @type {string} */
      var EMPTY = "";
      /** @type {number} */
      _this.activeLoaderIndex = 0;
      var slides = params.loader.slides;
      var padLength = params.loader.loadAllSlides ? slides.length : params.slidesPerView * (1 + params.loader.surroundGroups);
      /** @type {number} */
      var i = 0;
      for (;i < padLength;i++) {
        EMPTY = "outer" == params.loader.slidesHTMLType ? EMPTY + slides[i] : EMPTY + ("<" + params.slideElement + ' class="' + params.slideClass + '" data-swiperindex="' + i + '">' + slides[i] + "</" + params.slideElement + ">");
      }
      _this.wrapper.innerHTML = EMPTY;
      _this.calcSlides(true);
      if (!params.loader.loadAllSlides) {
        _this.wrapperTransitionEnd(_this.reloadSlides, true);
      }
    };
    /**
     * @return {undefined}
     */
    _this.reloadSlides = function() {
      var slides = params.loader.slides;
      /** @type {number} */
      var i = parseInt(_this.activeSlide().data("swiperindex"), 10);
      if (!(0 > i || i > slides.length - 1)) {
        /** @type {number} */
        _this.activeLoaderIndex = i;
        /** @type {number} */
        var newSlide = Math.max(0, i - params.slidesPerView * params.loader.surroundGroups);
        /** @type {number} */
        var max = Math.min(i + params.slidesPerView * (1 + params.loader.surroundGroups) - 1, slides.length - 1);
        if (0 < i) {
          /** @type {number} */
          i = -slideSize * (i - newSlide);
          if (isH) {
            _this.setWrapperTranslate(i, 0, 0);
          } else {
            _this.setWrapperTranslate(0, i, 0);
          }
          _this.setWrapperTransition(0);
        }
        if ("reload" === params.loader.logic) {
          /** @type {string} */
          var n = _this.wrapper.innerHTML = "";
          /** @type {number} */
          i = newSlide;
          for (;i <= max;i++) {
            n += "outer" == params.loader.slidesHTMLType ? slides[i] : "<" + params.slideElement + ' class="' + params.slideClass + '" data-swiperindex="' + i + '">' + slides[i] + "</" + params.slideElement + ">";
          }
          _this.wrapper.innerHTML = n;
        } else {
          /** @type {number} */
          n = 1E3;
          /** @type {number} */
          var min = 0;
          /** @type {number} */
          i = 0;
          for (;i < _this.slides.length;i++) {
            var val = _this.slides[i].data("swiperindex");
            if (val < newSlide || val > max) {
              _this.wrapper.removeChild(_this.slides[i]);
            } else {
              /** @type {number} */
              n = Math.min(val, n);
              /** @type {number} */
              min = Math.max(val, min);
            }
          }
          /** @type {number} */
          i = newSlide;
          for (;i <= max;i++) {
            if (i < n) {
              /** @type {Element} */
              newSlide = document.createElement(params.slideElement);
              newSlide.className = params.slideClass;
              newSlide.setAttribute("data-swiperindex", i);
              newSlide.innerHTML = slides[i];
              _this.wrapper.insertBefore(newSlide, _this.wrapper.firstChild);
            }
            if (i > min) {
              /** @type {Element} */
              newSlide = document.createElement(params.slideElement);
              newSlide.className = params.slideClass;
              newSlide.setAttribute("data-swiperindex", i);
              newSlide.innerHTML = slides[i];
              _this.wrapper.appendChild(newSlide);
            }
          }
        }
        _this.reInit(true);
      }
    };
    _this.calcSlides();
    if (0 < params.loader.slides.length) {
      if (0 == _this.slides.length) {
        _this.loadSlides();
      }
    }
    if (params.loop) {
      _this.createLoop();
    }
    _this.init();
    initEvents();
    if (params.pagination) {
      if (params.createPagination) {
        _this.createPagination(true);
      }
    }
    if (params.loop || 0 < params.initialSlide) {
      _this.swipeTo(params.initialSlide, 0, false);
    } else {
      _this.updateActiveSlide(0);
    }
    if (params.autoplay) {
      _this.startAutoplay();
    }
  }
};
Swiper.prototype = {
  plugins : {},
  /**
   * @param {Function} callback
   * @param {boolean} dataAndEvents
   * @return {undefined}
   */
  wrapperTransitionEnd : function(callback, dataAndEvents) {
    /**
     * @return {undefined}
     */
    function fireCallBack() {
      callback(a);
      if (a.params.queueEndCallbacks) {
        /** @type {boolean} */
        a._queueEndCallbacks = false;
      }
      if (!dataAndEvents) {
        /** @type {number} */
        var i = 0;
        for (;i < events.length;i++) {
          a.h.removeEventListener(el, events[i], fireCallBack, false);
        }
      }
    }
    var a = this;
    var el = a.wrapper;
    /** @type {Array} */
    var events = ["webkitTransitionEnd", "transitionend", "oTransitionEnd", "MSTransitionEnd", "msTransitionEnd"];
    if (callback) {
      /** @type {number} */
      var i = 0;
      for (;i < events.length;i++) {
        a.h.addEventListener(el, events[i], fireCallBack, false);
      }
    }
  },
  /**
   * @param {string} axis
   * @return {?}
   */
  getWrapperTranslate : function(axis) {
    var el = this.wrapper;
    var components;
    var h;
    var transformMatrix = window.WebKitCSSMatrix ? new WebKitCSSMatrix(window.getComputedStyle(el, null).webkitTransform) : window.getComputedStyle(el, null).MozTransform || (window.getComputedStyle(el, null).OTransform || (window.getComputedStyle(el, null).MsTransform || (window.getComputedStyle(el, null).msTransform || (window.getComputedStyle(el, null).transform || window.getComputedStyle(el, null).getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,")))));
    components = transformMatrix.toString().split(",");
    if (this.params.useCSS3Transforms) {
      if ("x" == axis) {
        h = 16 == components.length ? parseFloat(components[12]) : window.WebKitCSSMatrix ? transformMatrix.m41 : parseFloat(components[4]);
      }
      if ("y" == axis) {
        h = 16 == components.length ? parseFloat(components[13]) : window.WebKitCSSMatrix ? transformMatrix.m42 : parseFloat(components[5]);
      }
    } else {
      if ("x" == axis) {
        /** @type {number} */
        h = parseFloat(el.style.left, 10) || 0;
      }
      if ("y" == axis) {
        /** @type {number} */
        h = parseFloat(el.style.top, 10) || 0;
      }
    }
    return h || 0;
  },
  /**
   * @param {number} x
   * @param {number} y
   * @param {number} mayParseLabeledStatementInstead
   * @return {undefined}
   */
  setWrapperTranslate : function(x, y, mayParseLabeledStatementInstead) {
    var es = this.wrapper.style;
    x = x || 0;
    y = y || 0;
    mayParseLabeledStatementInstead = mayParseLabeledStatementInstead || 0;
    if (this.params.useCSS3Transforms) {
      if (this.support.transforms3d) {
        /** @type {string} */
        es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = "translate3d(" + x + "px, " + y + "px, " + mayParseLabeledStatementInstead + "px)";
      } else {
        /** @type {string} */
        es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = "translate(" + x + "px, " + y + "px)";
        if (!this.support.transforms) {
          /** @type {string} */
          es.left = x + "px";
          /** @type {string} */
          es.top = y + "px";
        }
      }
    } else {
      /** @type {string} */
      es.left = x + "px";
      /** @type {string} */
      es.top = y + "px";
    }
    this.callPlugins("onSetWrapperTransform", {
      x : x,
      y : y,
      z : mayParseLabeledStatementInstead
    });
  },
  /**
   * @param {number} duration
   * @return {undefined}
   */
  setWrapperTransition : function(duration) {
    var es = this.wrapper.style;
    /** @type {string} */
    es.webkitTransitionDuration = es.MsTransitionDuration = es.msTransitionDuration = es.MozTransitionDuration = es.OTransitionDuration = es.transitionDuration = duration / 1E3 + "s";
    this.callPlugins("onSetWrapperTransition", {
      duration : duration
    });
  },
  h : {
    /**
     * @param {boolean} deepDataAndEvents
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    getWidth : function(deepDataAndEvents, dataAndEvents) {
      /** @type {string} */
      var width = window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("width");
      /** @type {number} */
      var returnWidth = parseFloat(width);
      if (isNaN(returnWidth) || 0 < width.indexOf("%")) {
        /** @type {number} */
        returnWidth = deepDataAndEvents.offsetWidth - parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-left")) - parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-right"));
      }
      if (dataAndEvents) {
        returnWidth += parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-left")) + parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-right"));
      }
      return returnWidth;
    },
    /**
     * @param {boolean} deepDataAndEvents
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    getHeight : function(deepDataAndEvents, dataAndEvents) {
      if (dataAndEvents) {
        return deepDataAndEvents.offsetHeight;
      }
      /** @type {string} */
      var height = window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("height");
      /** @type {number} */
      var returnHeight = parseFloat(height);
      if (isNaN(returnHeight) || 0 < height.indexOf("%")) {
        /** @type {number} */
        returnHeight = deepDataAndEvents.offsetHeight - parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-top")) - parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-bottom"));
      }
      if (dataAndEvents) {
        returnHeight += parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-top")) + parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-bottom"));
      }
      return returnHeight;
    },
    /**
     * @param {Object} el
     * @return {?}
     */
    getOffset : function(el) {
      var box = el.getBoundingClientRect();
      /** @type {(HTMLElement|null)} */
      var b = document.body;
      var clientTop = el.clientTop || (b.clientTop || 0);
      b = el.clientLeft || (b.clientLeft || 0);
      var scrollTop = window.pageYOffset || el.scrollTop;
      el = window.pageXOffset || el.scrollLeft;
      if (document.documentElement) {
        if (!window.pageYOffset) {
          /** @type {number} */
          scrollTop = document.documentElement.scrollTop;
          /** @type {number} */
          el = document.documentElement.scrollLeft;
        }
      }
      return{
        top : box.top + scrollTop - clientTop,
        left : box.left + el - b
      };
    },
    /**
     * @return {?}
     */
    windowWidth : function() {
      if (window.innerWidth) {
        return window.innerWidth;
      }
      if (document.documentElement && document.documentElement.clientWidth) {
        return document.documentElement.clientWidth;
      }
    },
    /**
     * @return {?}
     */
    windowHeight : function() {
      if (window.innerHeight) {
        return window.innerHeight;
      }
      if (document.documentElement && document.documentElement.clientHeight) {
        return document.documentElement.clientHeight;
      }
    },
    /**
     * @return {?}
     */
    windowScroll : function() {
      if ("undefined" != typeof pageYOffset) {
        return{
          left : window.pageXOffset,
          top : window.pageYOffset
        };
      }
      if (document.documentElement) {
        return{
          left : document.documentElement.scrollLeft,
          top : document.documentElement.scrollTop
        };
      }
    },
    /**
     * @param {Object} el
     * @param {string} event
     * @param {Function} listener
     * @param {boolean} recurring
     * @return {undefined}
     */
    addEventListener : function(el, event, listener, recurring) {
      if (el.addEventListener) {
        el.addEventListener(event, listener, recurring);
      } else {
        if (el.attachEvent) {
          el.attachEvent("on" + event, listener);
        }
      }
    },
    /**
     * @param {Object} el
     * @param {string} event
     * @param {Function} listener
     * @param {boolean} recurring
     * @return {undefined}
     */
    removeEventListener : function(el, event, listener, recurring) {
      if (el.removeEventListener) {
        el.removeEventListener(event, listener, recurring);
      } else {
        if (el.detachEvent) {
          el.detachEvent("on" + event, listener);
        }
      }
    }
  },
  /**
   * @param {Element} el
   * @param {string} transform
   * @return {undefined}
   */
  setTransform : function(el, transform) {
    var es = el.style;
    es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transform;
  },
  /**
   * @param {Element} el
   * @param {?} translate
   * @return {undefined}
   */
  setTranslate : function(el, translate) {
    var es = el.style;
    var x = translate.x || 0;
    var y = translate.y || 0;
    var t = translate.z || 0;
    /** @type {string} */
    es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = this.support.transforms3d ? "translate3d(" + x + "px," + y + "px," + t + "px)" : "translate(" + x + "px," + y + "px)";
    if (!this.support.transforms) {
      /** @type {string} */
      es.left = x + "px";
      /** @type {string} */
      es.top = y + "px";
    }
  },
  /**
   * @param {Element} el
   * @param {number} duration
   * @return {undefined}
   */
  setTransition : function(el, duration) {
    var es = el.style;
    /** @type {string} */
    es.webkitTransitionDuration = es.MsTransitionDuration = es.msTransitionDuration = es.MozTransitionDuration = es.OTransitionDuration = es.transitionDuration = duration + "ms";
  },
  support : {
    touch : window.Modernizr && true === Modernizr.touch || function() {
      return!!("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch);
    }(),
    transforms3d : window.Modernizr && true === Modernizr.csstransforms3d || function() {
      /** @type {Element} */
      var div = document.createElement("div");
      return "webkitPerspective" in div.style || ("MozPerspective" in div.style || ("OPerspective" in div.style || ("MsPerspective" in div.style || "perspective" in div.style)));
    }(),
    transforms : window.Modernizr && true === Modernizr.csstransforms || function() {
      /** @type {(CSSStyleDeclaration|null)} */
      var div = document.createElement("div").style;
      return "transform" in div || ("WebkitTransform" in div || ("MozTransform" in div || ("msTransform" in div || ("MsTransform" in div || "OTransform" in div))));
    }(),
    transitions : window.Modernizr && true === Modernizr.csstransitions || function() {
      /** @type {(CSSStyleDeclaration|null)} */
      var div = document.createElement("div").style;
      return "transition" in div || ("WebkitTransition" in div || ("MozTransition" in div || ("msTransition" in div || ("MsTransition" in div || "OTransition" in div))));
    }()
  },
  browser : {
    ie8 : function() {
      /** @type {number} */
      var q = -1;
      if ("Microsoft Internet Explorer" == navigator.appName) {
        if (null != /MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent)) {
          /** @type {number} */
          q = parseFloat(RegExp.$1);
        }
      }
      return-1 != q && 9 > q;
    }(),
    ie10 : window.navigator.msPointerEnabled
  }
};
if (window.jQuery || window.Zepto) {
  (function($) {
    /**
     * @param {(RegExp|string)} s
     * @return {?}
     */
    $.fn.swiper = function(s) {
      s = new Swiper($(this)[0], s);
      $(this).data("swiper", s);
      return s;
    };
  })(window.jQuery || window.Zepto);
}
if ("undefined" !== typeof module) {
  /** @type {function (HTMLElement, Object): undefined} */
  module.exports = Swiper;
}
;